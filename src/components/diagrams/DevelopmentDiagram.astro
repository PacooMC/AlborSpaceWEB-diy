---
interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<div class="w-full h-full flex items-center justify-center p-4">
  <div class="relative w-full max-w-5xl">
    <!-- Enhanced background with subtle glow -->
    <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full h-full bg-gradient-to-br from-[#FFB800]/3 to-[#915F1C]/3 rounded-3xl blur-[80px] opacity-60"></div>
    
    <!-- Main container with glass effect -->
    <div class="relative bg-[#0D0F1A]/90 rounded-2xl border border-[#915F1C]/15 p-8 backdrop-blur-xl shadow-2xl">
      
      <!-- Header -->
      <div class="text-center mb-10">
        <h2 class="text-[#FFB800] text-xl font-medium mb-3 tracking-wide">Development Methodology</h2>
        <div class="w-24 h-px bg-gradient-to-r from-transparent via-[#FFB800]/40 to-transparent mx-auto"></div>
      </div>
      
      <!-- Development Flow -->
      <div class="mb-12">
        <h3 class="text-[#FFB800]/80 text-sm font-medium mb-8 text-center uppercase tracking-wider">Agile Development Process</h3>
        
        <div class="flex flex-wrap justify-center items-center gap-4">
          {[
            { 
              name: 'Requirements',
              icon: `<path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" stroke="#FFB800" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round"/>`
            },
            {
              name: 'Design',
              icon: `<path d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM7 3H5a2 2 0 00-2 2v12a4 4 0 004 4M9 9h4a2 2 0 012 2v4a2 2 0 01-2 2h-4M9 9V7a2 2 0 012-2h2M9 9v10" stroke="#FFB800" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round"/>`
            },
            {
              name: 'Development',
              icon: `<path d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" stroke="#FFB800" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round"/>`
            },
            {
              name: 'Testing',
              icon: `<path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" stroke="#FFB800" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round"/>`
            },
            {
              name: 'Deployment',
              icon: `<path d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" stroke="#FFB800" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round"/>`
            }
          ].map((step, i) => (
            <div class="flex items-center">
              <!-- Step circle -->
              <div class="group relative">
                <div class="w-20 h-20 rounded-2xl bg-gradient-to-br from-[#0D0F1A]/95 to-[#915F1C]/10 border border-[#FFB800]/20 flex flex-col items-center justify-center transition-all duration-500 hover:scale-105 hover:border-[#FFB800]/40 hover:shadow-lg hover:shadow-[#FFB800]/10 cursor-pointer">
                  
                  <!-- Icon -->
                  <svg class="w-6 h-6 mb-1 transition-all duration-300 group-hover:scale-110" viewBox="0 0 24 24">
                    {step.icon}
                  </svg>
                  
                  <!-- Step name -->
                  <span class="text-[#FFB800]/70 text-xs font-medium group-hover:text-[#FFB800] transition-colors duration-300">{step.name}</span>
                  
                  <!-- Glow effect on hover -->
                  <div class="absolute inset-0 rounded-2xl bg-[#FFB800]/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 -z-10"></div>
                </div>
                
                <!-- Progress indicator -->
                <div class="absolute -bottom-2 left-1/2 -translate-x-1/2 w-2 h-2 rounded-full bg-[#FFB800]/30 process-indicator" style={`animation-delay: ${i * 0.8}s`}></div>
              </div>
              
              <!-- Connector arrow -->
              {i < 4 && (
                <div class="mx-3 flex items-center">
                  <div class="w-8 h-0.5 bg-gradient-to-r from-[#FFB800]/40 to-[#915F1C]/40 relative overflow-hidden">
                    <div class="absolute inset-0 bg-gradient-to-r from-transparent via-[#FFB800]/60 to-transparent w-full h-full animate-flow" style={`animation-delay: ${i * 0.5}s`}></div>
                  </div>
                  <svg class="w-3 h-3 text-[#FFB800]/50 ml-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                  </svg>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      <!-- Divider with animated line -->
      <div class="relative mb-12">
        <div class="absolute inset-0 flex items-center">
          <div class="w-full border-t border-[#915F1C]/20"></div>
        </div>
        <div class="relative flex justify-center">
          <div class="px-6 bg-[#0D0F1A]/90 text-[#FFB800]/80 text-sm font-medium uppercase tracking-wider">Technology Stack</div>
        </div>
      </div>

      <!-- Technology Grid -->
      <div class="grid grid-cols-5 gap-6">
        {[
          { 
            name: 'Python',
            description: 'Algorithm Development',
            icon: `<circle cx="12" cy="12" r="3" fill="none" stroke="#FFB800" stroke-width="1.5"/><path d="M12 1v6m0 6v6m11-7h-6m-6 0H1" stroke="#FFB800" stroke-width="1.5" stroke-linecap="round"/>`
          },
          {
            name: 'C++',
            description: 'High-Performance',
            icon: `<polygon points="12 2 2 7 12 12 22 7 12 2" fill="none" stroke="#FFB800" stroke-width="1.5" stroke-linejoin="round"/><path d="M2 17l10 5 10-5M2 12l10 5 10-5" stroke="#FFB800" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>`
          },
          {
            name: 'CUDA',
            description: 'Parallel Processing',
            icon: `<path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z" fill="none" stroke="#FFB800" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>`
          },
          {
            name: 'SDR',
            description: 'Signal Processing',
            icon: `<path d="M12 2a10 10 0 100 20 10 10 0 000-20zm0 18a8 8 0 110-16 8 8 0 010 16z" fill="none" stroke="#FFB800" stroke-width="1.5"/><path d="M8 12h8M12 8v8" stroke="#FFB800" stroke-width="1.5" stroke-linecap="round"/>`
          },
          {
            name: 'FPGA',
            description: 'Hardware Accel.',
            icon: `<rect x="3" y="3" width="18" height="18" rx="2" ry="2" fill="none" stroke="#FFB800" stroke-width="1.5"/><path d="M7 7h2v2H7zM11 7h2v2h-2zM15 7h2v2h-2zM7 11h2v2H7zM11 11h2v2h-2zM15 11h2v2h-2zM7 15h2v2H7zM11 15h2v2h-2zM15 15h2v2h-2z" fill="none" stroke="#FFB800" stroke-width="1"/>` 
          }
        ].map((tech, index) => (
          <div class="group relative">
            <div class="bg-gradient-to-br from-[#0D0F1A]/80 to-[#915F1C]/5 rounded-xl border border-[#915F1C]/15 p-4 transition-all duration-500 hover:border-[#FFB800]/30 hover:transform hover:scale-105 hover:shadow-lg hover:shadow-[#FFB800]/10 cursor-pointer h-full">
              
              <!-- Tech icon -->
              <div class="flex justify-center mb-3">
                <div class="w-12 h-12 rounded-xl bg-[#FFB800]/5 border border-[#FFB800]/20 flex items-center justify-center group-hover:bg-[#FFB800]/10 transition-all duration-300">
                  <svg class="w-7 h-7 transition-all duration-300 group-hover:scale-110" viewBox="0 0 24 24">
                    {tech.icon}
                  </svg>
                </div>
              </div>
              
              <!-- Tech info -->
              <div class="text-center">
                <h4 class="text-[#FFB800] text-sm font-medium mb-1 group-hover:text-[#FFB800]/90 transition-colors duration-300">{tech.name}</h4>
                <p class="text-[#FFB800]/50 text-xs font-medium group-hover:text-[#FFB800]/70 transition-colors duration-300">{tech.description}</p>
              </div>
              
              <!-- Progress bar -->
              <div class="mt-3 w-full h-1 bg-[#915F1C]/10 rounded-full overflow-hidden">
                <div class="h-full bg-gradient-to-r from-[#FFB800]/40 to-[#915F1C]/40 rounded-full transform -translate-x-full group-hover:translate-x-0 transition-transform duration-1000 ease-out" style={`transition-delay: ${index * 0.2}s`}></div>
              </div>
              
              <!-- Hover glow -->
              <div class="absolute inset-0 rounded-xl bg-gradient-to-br from-[#FFB800]/5 to-[#915F1C]/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 -z-10"></div>
            </div>
          </div>
        ))}
      </div>
      
      <!-- Bottom accent line -->
      <div class="mt-8 w-full h-px bg-gradient-to-r from-transparent via-[#FFB800]/30 to-transparent"></div>
    </div>
  </div>
</div>

<style>
  /* Process indicator animation */
  .process-indicator {
    animation: processFlow 4s ease-in-out infinite;
  }

  @keyframes processFlow {
    0%, 20% {
      opacity: 0.3;
      transform: translateX(-50%) scale(1);
    }
    50% {
      opacity: 1;
      transform: translateX(-50%) scale(1.5);
    }
    80%, 100% {
      opacity: 0.3;
      transform: translateX(-50%) scale(1);
    }
  }

  /* Flow animation for connectors */
  @keyframes flow {
    0% {
      transform: translateX(-100%);
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
    100% {
      transform: translateX(100%);
      opacity: 0;
    }
  }

  .animate-flow {
    animation: flow 3s ease-in-out infinite;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .grid-cols-5 {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }
    
    .grid-cols-5 > :last-child {
      grid-column: span 2;
      justify-self: center;
    }
  }

  @media (max-width: 640px) {
    .grid-cols-5 {
      grid-template-columns: 1fr;
    }
    
    .grid-cols-5 > :last-child {
      grid-column: span 1;
    }
  }
</style>