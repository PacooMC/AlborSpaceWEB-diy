---
---

<div class="perspective-container">
  <!-- Abstract space visualization -->
  <div class="space-scene">
    <!-- Dynamic nebula glow -->
    <div class="nebula nebula-1"></div>
    <div class="nebula nebula-2"></div>
    <div class="nebula nebula-3"></div>
    
    <!-- Orbital paths -->
    <div class="orbit-path"></div>
    <div class="orbit-path-2"></div>
    
    <!-- Distant stars layer -->
    <div class="distant-stars"></div>
    
    <!-- Mid-distance stars layer -->
    <div class="mid-stars"></div>
    
    <!-- Foreground stars layer -->
    <div class="foreground-stars"></div>
    
    <!-- Shooting stars -->
    <div class="shooting-star"></div>
    <div class="shooting-star shooting-star-2"></div>
    
    <!-- Pulsing star points -->
    <div class="star-point" style="--delay: 0s; --top: 20%; --left: 30%"></div>
    <div class="star-point" style="--delay: 2s; --top: 70%; --left: 80%"></div>
    <div class="star-point" style="--delay: 4s; --top: 40%; --left: 60%"></div>
    <div class="star-point" style="--delay: 1s; --top: 80%; --left: 20%"></div>
    <div class="star-point" style="--delay: 3s; --top: 30%; --left: 70%"></div>
  </div>
</div>

<style>
  /* Space scene container with perspective */
  .perspective-container {
    perspective: 2000px;
    animation: fadeIn 1.5s ease 0.4s forwards;
    opacity: 0;
    height: 450px;
    width: 100%;
  }
  
  @keyframes fadeIn {
    0% { opacity: 0; }
    100% { opacity: 1; }
  }
  
  .space-scene {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    animation: sceneRotate 120s linear infinite;
  }
  
  @keyframes sceneRotate {
    0% { transform: rotateY(0) rotateX(15deg); }
    100% { transform: rotateY(360deg) rotateX(15deg); }
  }
  
  /* Nebula effects */
  .nebula {
    position: absolute;
    border-radius: 50%;
    filter: blur(50px);
    opacity: 0.2;
    transform-style: preserve-3d;
  }
  
  .nebula-1 {
    width: 200px;
    height: 200px;
    background: radial-gradient(circle, rgba(233, 69, 96, 0.4), transparent 70%);
    top: 40%;
    left: 30%;
    transform: translateZ(-200px);
    animation: nebulaFloat 15s ease-in-out infinite alternate;
  }
  
  .nebula-2 {
    width: 300px;
    height: 300px;
    background: radial-gradient(circle, rgba(83, 52, 131, 0.3), transparent 70%);
    bottom: 30%;
    right: 20%;
    transform: translateZ(-150px);
    animation: nebulaFloat 20s ease-in-out infinite alternate-reverse;
  }
  
  .nebula-3 {
    width: 180px;
    height: 180px;
    background: radial-gradient(circle, rgba(28, 130, 173, 0.3), transparent 70%);
    top: 30%;
    right: 40%;
    transform: translateZ(-180px);
    animation: nebulaFloat 18s ease-in-out infinite alternate;
  }
  
  @keyframes nebulaFloat {
    0% { transform: translateZ(-200px); filter: blur(50px); }
    100% { transform: translateZ(-180px); filter: blur(60px); }
  }
  
  /* Orbit paths */
  .orbit-path {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 300px;
    height: 300px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    transform: translate(-50%, -50%) rotateX(75deg);
  }
  
  .orbit-path-2 {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 200px;
    height: 200px;
    border: 1px solid rgba(255, 255, 255, 0.07);
    border-radius: 50%;
    transform: translate(-50%, -50%) rotateX(75deg);
  }
  
  /* Star layers for depth */
  .distant-stars, .mid-stars, .foreground-stars {
    position: absolute;
    inset: 0;
    transform-style: preserve-3d;
  }
  
  .distant-stars {
    animation: starsRotate 180s linear infinite reverse;
  }
  
  .mid-stars {
    animation: starsRotate 120s linear infinite;
  }
  
  .foreground-stars {
    animation: starsRotate 90s linear infinite reverse;
  }
  
  @keyframes starsRotate {
    0% { transform: rotateY(0) rotateX(5deg); }
    100% { transform: rotateY(360deg) rotateX(5deg); }
  }
  
  /* Shooting stars */
  .shooting-star {
    position: absolute;
    width: 2px;
    height: 2px;
    background-color: white;
    box-shadow: 0 0 10px 2px rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    top: 40%;
    left: 0%;
    opacity: 0;
    animation: shootingStar 8s linear infinite;
    animation-delay: 2s;
  }
  
  .shooting-star-2 {
    top: 20%;
    animation-delay: 6s;
  }
  
  @keyframes shootingStar {
    0% {
      opacity: 0;
      transform: translateX(0) translateY(0);
      width: 2px;
    }
    0.5% {
      opacity: 1;
      width: 2px;
    }
    5% {
      width: 15px;
      opacity: 1;
      transform: translateX(60px) translateY(30px);
    }
    10% {
      width: 2px;
      opacity: 0;
      transform: translateX(120px) translateY(60px);
    }
    100% {
      opacity: 0;
      transform: translateX(120px) translateY(60px);
    }
  }
  
  /* Star points with glow */
  .star-point {
    position: absolute;
    width: 4px;
    height: 4px;
    background-color: white;
    border-radius: 50%;
    box-shadow: 0 0 10px 4px rgba(255, 255, 255, 0.5);
    top: var(--top);
    left: var(--left);
    transform-style: preserve-3d;
    animation: starPulse 4s ease-in-out infinite;
    animation-delay: var(--delay);
  }
  
  @keyframes starPulse {
    0%, 100% { 
      transform: scale(1);
      opacity: 0.5;
      box-shadow: 0 0 10px 2px rgba(255, 255, 255, 0.5);
    }
    50% { 
      transform: scale(1.5);
      opacity: 1;
      box-shadow: 0 0 15px 4px rgba(255, 255, 255, 0.8), 0 0 20px 8px rgba(255, 255, 255, 0.3);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Create stars for each layer with different depths
    createStars('.distant-stars', 150, -500, -300);
    createStars('.mid-stars', 150, -200, -50);
    createStars('.foreground-stars', 100, -50, 100);
    
    function createStars(selector, count, minDepth, maxDepth) {
      const container = document.querySelector(selector);
      if (!container) return;
      
      for (let i = 0; i < count; i++) {
        const star = document.createElement('div');
        const size = Math.random() * 1.2 + 0.3;
        const depth = minDepth + Math.random() * (maxDepth - minDepth);
        
        // Vary star colors
        let color = 'white';
        let opacity = Math.random() * 0.6 + 0.4;
        
        if (Math.random() > 0.9) {
          // Create occasional colored stars
          const colors = ['#8FBCFF', '#FF9E9E', '#FFE8A3'];
          color = colors[Math.floor(Math.random() * colors.length)];
          opacity *= 1.2;
        }
        
        star.style.cssText = `
          position: absolute;
          width: ${size}px;
          height: ${size}px;
          background-color: ${color};
          opacity: ${opacity};
          border-radius: 50%;
          top: ${Math.random() * 100}%;
          left: ${Math.random() * 100}%;
          transform: translateZ(${depth}px);
          ${size > 0.8 ? `box-shadow: 0 0 ${size}px ${color.replace(')', ', 0.6)')}` : ''}
          animation: twinkle ${3 + Math.random() * 4}s ease-in-out infinite;
          animation-delay: ${Math.random() * 5}s;
        `;
        
        container.appendChild(star);
      }
    }
    
    // Define keyframe animation for twinkling stars
    if (!document.getElementById('twinkle-animation')) {
      const style = document.createElement('style');
      style.id = 'twinkle-animation';
      style.textContent = `
        @keyframes twinkle {
          0%, 100% { opacity: 0.4; transform: scale(1); }
          50% { opacity: 1; transform: scale(1.2); }
        }
      `;
      document.head.appendChild(style);
    }
  });
</script>
