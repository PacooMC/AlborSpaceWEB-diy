---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/home/Hero.astro';
import Technology from '../components/home/Technology.astro';
import Solutions from '../components/home/Solutions.astro';
import TeamPreview from '../components/home/TeamPreview.astro';
---

<Layout title="ALBOR SPACE - Advanced Satellite Communication Systems">
  <!-- Ultra dark navy space page with elegant transitions -->
  <div class="ultra-dark-space-page">
    <!-- Hero Section - perfect centering, no padding -->
    <Hero />

    <!-- Technology Section - large top margin, seamless transition -->
    <div class="pt-32">
      <Technology />
    </div>

    <!-- Solutions Section - large top margin, seamless transition -->
    <div class="pt-40">
      <Solutions />
    </div>

    <!-- Team Preview Section - large top margin, seamless transition -->
    <div class="pt-40">
      <TeamPreview />
    </div>
  </div>
</Layout>

<style is:global>
  /* Ultra dark space page with enhanced depth */
  .ultra-dark-space-page {
    position: relative;
    background: transparent;
  }

  /* Enhanced animations with ultra dark space theme */
  .slide-left {
    animation: slideInLeft 1.2s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    animation-delay: 0.2s;
  }
  
  .slide-right {
    animation: slideInRight 1.2s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    animation-delay: 0.2s;
  }
  
  @keyframes slideInLeft {
    0% {
      opacity: 0;
      transform: translateX(-50px);
    }
    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  @keyframes slideInRight {
    0% {
      opacity: 0;
      transform: translateX(50px);
    }
    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  @keyframes fadeIn {
    0% { 
      opacity: 0; 
      transform: translateY(30px); 
    }
    100% { 
      opacity: 1; 
      transform: translateY(0); 
    }
  }
  
  /* Enhanced reveal elements with ultra dark theme */
  .heading-lg {
    font-weight: 300;
    letter-spacing: -0.03em;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  .heading-lg::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(255, 107, 0, 0.6), transparent);
    transition: width 1s ease 0.5s;
  }
  
  .heading-lg.revealed {
    opacity: 1;
    transform: translateY(0);
  }

  .heading-lg.revealed::after {
    width: 60px;
  }
  
  .reveal-element {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .reveal-element.revealed {
    opacity: 1;
    transform: translateY(0);
  }

  /* Enhanced glass effects with ultra dark theme */
  .glass-card {
    position: relative;
    overflow: hidden;
    background-color: rgba(0, 0, 18, 0.4);
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.06);
  }

  .glass-card:hover {
    border-color: rgba(255, 107, 0, 0.25);
    background-color: rgba(0, 0, 24, 0.5);
    box-shadow: 
      0 8px 32px rgba(0, 0, 18, 0.8),
      0 0 20px rgba(255, 107, 0, 0.1);
  }

  .glass-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, transparent, rgba(255, 107, 0, 0.6), transparent);
    transition: left 0.8s ease;
  }

  .glass-card:hover::before {
    left: 100%;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Enhanced reveal animation with staggered delays
    const revealElements = document.querySelectorAll('.reveal-element');
    const headings = document.querySelectorAll('.heading-lg');
    
    // Create intersection observer for smoother animations
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          const delay = entry.target.getAttribute('data-reveal-delay') || (index * 100);
          setTimeout(() => {
            entry.target.classList.add('revealed');
          }, parseInt(delay));
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    // Observe all reveal elements
    [...revealElements, ...headings].forEach(el => {
      observer.observe(el);
    });

    // Add smooth scroll behavior
    document.documentElement.style.scrollBehavior = 'smooth';
  });
</script>