---
import Layout from '../layouts/Layout.astro';
import { contactPage, contactInfo, contactForm } from '../content/contact';
import { Mail, Phone, MapPin, Send } from 'lucide-astro';

// Map icon strings to components
const getIcon = (iconName) => {
  const icons = {
    'Mail': Mail,
    'Phone': Phone,
    'MapPin': MapPin,
  };

  const IconComponent = icons[iconName] || Mail;
  return IconComponent;
};
---

<Layout title={`${contactPage.title} - ALBOR SPACE`} description={contactPage.description}>
  <div class="pt-32 pb-24 relative">
    <!-- Background effects -->
    <div class="absolute inset-0 bg-gradient-to-b from-dark-900/90 via-dark-800/50 to-dark-900/90"></div>

    <!-- Enhanced sunrise glow effects using orange palette -->
    <div class="absolute top-0 left-1/2 -translate-x-1/2 w-full h-[40vh] bg-gradient-radial from-orange-500/20 to-transparent opacity-50 blur-[100px]"></div>
    <div class="absolute bottom-0 right-0 w-2/3 h-[50vh] bg-gradient-to-t from-orange-700/10 via-orange-500/10 to-transparent opacity-60 blur-[100px]"></div>

    <div class="container-custom relative z-10">
      <!-- Page header with slide-in animation -->
      <div class="text-center mb-16 reveal-element">
        <h1 class="heading-lg mb-4 slide-right">{contactPage.title}</h1>
        <p class="text-white/60 max-w-2xl mx-auto">{contactPage.description}</p>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-10 mt-16">
        <!-- Contact Info -->
        <div class="lg:col-span-1">
          <div class="glass-card h-full reveal-element contact-info-card">
            <h2 class="text-xl font-light mb-8 text-gradient-orange">{contactInfo.title}</h2>

            <div class="space-y-8">
              {contactInfo.items.map((item, index) => {
                const IconComponent = getIcon(item.icon);
                return (
                  <div class="flex items-start hover-glow-item" data-reveal-delay={index * 100}>
                    <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-orange-500/20 to-orange-700/20 flex items-center justify-center text-orange-500 shrink-0 mr-6 contact-icon-container">
                      <IconComponent size={22} />
                    </div>
                    <div>
                      <h3 class="text-white text-lg mb-2">{item.title}</h3>
                      <p class="text-white/70 whitespace-pre-line">{item.content}</p>
                    </div>
                  </div>
                );
              })}
            </div>

            <!-- Social links -->
            <div class="mt-12 pt-8 border-t border-white/5">
              <h3 class="text-white/70 text-sm font-medium mb-6">Connect With Us</h3>
              <div class="flex space-x-4">
                <a href="#" class="w-10 h-10 rounded-full bg-gradient-to-br from-orange-500/20 to-orange-700/20 flex items-center justify-center text-white/70 hover:text-white transition-colors duration-300 social-icon-link">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect width="4" height="12" x="2" y="9"></rect><circle cx="4" cy="4" r="2"></circle></svg>
                </a>
                <a href="#" class="w-10 h-10 rounded-full bg-gradient-to-br from-orange-500/20 to-orange-700/20 flex items-center justify-center text-white/70 hover:text-white transition-colors duration-300 social-icon-link">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>
                </a>
                <a href="#" class="w-10 h-10 rounded-full bg-gradient-to-br from-orange-500/20 to-orange-700/20 flex items-center justify-center text-white/70 hover:text-white transition-colors duration-300 social-icon-link">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="20" height="20" x="2" y="2" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" x2="17.51" y1="6.5" y2="6.5"></line></svg>
                </a>
                <a href="#" class="w-10 h-10 rounded-full bg-gradient-to-br from-orange-500/20 to-orange-700/20 flex items-center justify-center text-white/70 hover:text-white transition-colors duration-300 social-icon-link">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path></svg>
                </a>
              </div>
            </div>
          </div>
        </div>

        <!-- Contact Form -->
        <div class="lg:col-span-2">
          <div class="glass-card reveal-element contact-form-card">
            <form id="contact-form" class="space-y-6">
              <h2 class="text-xl font-light mb-8 text-gradient-orange">Send Us a Message</h2>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                {contactForm.fields.slice(0, 2).map((field) => (
                  <div class="form-group">
                    <label for={field.id} class="block text-white/70 mb-2 text-sm">{field.label}</label>
                    <div class="relative">
                      <input
                        type={field.type}
                        id={field.id}
                        name={field.id}
                        required={field.required}
                        class="w-full bg-dark-800/50 border border-white/10 rounded-lg px-4 py-3 text-white focus:border-orange-500/50 focus:outline-none transition-colors duration-200 form-input"
                      />
                      <div class="form-input-glow"></div>
                    </div>
                  </div>
                ))}
              </div>

              {contactForm.fields.slice(2).map((field) => (
                <div class="form-group">
                  <label for={field.id} class="block text-white/70 mb-2 text-sm">{field.label}</label>
                  <div class="relative">
                    {field.type === 'textarea' ? (
                      <textarea
                        id={field.id}
                        name={field.id}
                        rows={field.rows || 4}
                        required={field.required}
                        class="w-full bg-dark-800/50 border border-white/10 rounded-lg px-4 py-3 text-white focus:border-orange-500/50 focus:outline-none transition-colors duration-200 form-input"
                      ></textarea>
                    ) : (
                      <input
                        type={field.type}
                        id={field.id}
                        name={field.id}
                        required={field.required}
                        class="w-full bg-dark-800/50 border border-white/10 rounded-lg px-4 py-3 text-white focus:border-orange-500/50 focus:outline-none transition-colors duration-200 form-input"
                      />
                    )}
                    <div class="form-input-glow"></div>
                  </div>
                </div>
              ))}

              <div class="mt-8">
                <button
                  type="submit"
                  class="submit-button group w-full"
                >
                  <div class="submit-button-bg"></div>
                  <div class="submit-button-content">
                    <span>{contactForm.submitButton}</span>
                    <Send class="w-5 h-5 ml-2 transition-transform duration-500 ease-out transform group-hover:translate-x-1" />
                  </div>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- Map section with sunrise gradient overlay -->
      <div class="mt-20 reveal-element">
        <div class="relative rounded-xl overflow-hidden h-[400px]">
          <iframe
            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3198.175530501069!2d-4.481998584349033!3d36.7154863799673!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0xd72f73a33a5b81b%3A0xc29104bcdf67ee1d!2sUniversidad%20de%20M%C3%A1laga!5e0!3m2!1sen!2ses!4v1620236356746!5m2!1sen!2ses"
            width="100%"
            height="100%"
            style="border:0;"
            allowfullscreen=""
            loading="lazy"
            class="grayscale contrast-125 brightness-75"
          ></iframe>

          <!-- Sunrise gradient overlay using orange -->
          <div class="absolute inset-0 bg-gradient-to-t from-dark-900 via-transparent to-transparent opacity-90"></div>
          <div class="absolute inset-0 bg-gradient-to-r from-orange-500/30 to-orange-700/30 mix-blend-overlay opacity-40"></div>

          <!-- Map info card -->
          <div class="absolute bottom-6 left-6 right-6 md:left-auto md:right-6 md:max-w-md bg-dark-800/80 backdrop-blur-md p-6 rounded-xl border border-white/10">
            <h3 class="text-xl font-light mb-3 text-gradient-orange">Visit Our Office</h3>
            <p class="text-white/80 mb-1">E.T.S.I. Telecomunicación</p>
            <p class="text-white/80 mb-1">Universidad de Málaga</p>
            <p class="text-white/80">Málaga, Spain</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Base card styles */
  .glass-card {
    background-color: rgba(13, 15, 26, 0.2); /* Use dark-800 base */
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: 0.75rem;
    padding: 2rem;
    transition: all 0.3s ease;
    overflow: hidden;
  }

  /* Enhanced contact info card with orange gradient */
  .contact-info-card {
    position: relative;
    overflow: hidden;
  }

  .contact-info-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 6px;
    background: linear-gradient(90deg, theme('colors.orange.500 / 70%'), theme('colors.orange.700 / 70%'));
    border-radius: 0.75rem 0.75rem 0 0;
  }

  .contact-info-card::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: 0.75rem;
    padding: 1px;
    background: linear-gradient(60deg,
      theme('colors.orange.500 / 0%') 25%,
      theme('colors.orange.500 / 30%') 50%,
      theme('colors.orange.700 / 30%') 75%,
      theme('colors.orange.700 / 0%') 100%
    );
    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    opacity: 0;
    transition: opacity 0.5s ease;
  }

  .contact-info-card:hover::after {
    opacity: 1;
  }

  /* Contact icon containers with orange gradient */
  .contact-icon-container {
    position: relative;
    transition: all 0.3s ease;
    overflow: hidden;
    background: linear-gradient(135deg, theme('colors.orange.500 / 20%'), theme('colors.orange.700 / 20%'));
    color: theme('colors.orange.400'); /* Lighter orange for icon */
  }

  .contact-icon-container::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(45deg,
      theme('colors.orange.500 / 50%'),
      theme('colors.orange.700 / 50%')
    );
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .hover-glow-item:hover .contact-icon-container::before {
    opacity: 0.3;
  }

  .hover-glow-item:hover .contact-icon-container {
    transform: scale(1.05);
    box-shadow: 0 0 15px theme('colors.orange.500 / 50%');
  }

  /* Social icon links with orange gradient */
  .social-icon-link {
    position: relative;
    overflow: hidden;
    transition: all 0.4s ease;
    background: linear-gradient(135deg, theme('colors.orange.500 / 20%'), theme('colors.orange.700 / 20%'));
  }

  .social-icon-link:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px theme('colors.orange.500 / 40%');
  }

  .social-icon-link::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(45deg,
      theme('colors.orange.500 / 50%'),
      theme('colors.orange.700 / 50%')
    );
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .social-icon-link:hover::before {
    opacity: 0.8;
  }

  /* Enhanced form styling with orange gradient */
  .contact-form-card {
    position: relative;
  }

  .contact-form-card::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
    height: 6px;
    background: linear-gradient(90deg, theme('colors.orange.700 / 70%'), theme('colors.orange.500 / 70%'));
    border-radius: 0.75rem 0.75rem 0 0;
  }

  .form-group {
    position: relative;
  }

  .form-input {
    position: relative;
    background-color: theme('colors.dark.800 / 50%'); /* Use dark-800 */
    transition: all 0.3s ease;
  }

  .form-input:focus {
    border-color: theme('colors.orange.500 / 50%');
    box-shadow: 0 0 15px theme('colors.orange.500 / 20%');
  }

  .form-input-glow {
    position: absolute;
    inset: 0;
    border-radius: 0.5rem;
    pointer-events: none;
    transition: opacity 0.3s ease;
    opacity: 0;
    background: radial-gradient(circle at var(--x, 50%) var(--y, 50%), theme('colors.orange.500 / 20%') 0%, transparent 75%);
  }

  .form-input:focus + .form-input-glow {
    opacity: 1;
  }

  /* Submit button styling with orange gradient */
  .submit-button {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.875rem 2rem;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 400;
    color: white;
    overflow: hidden;
    transition: all 0.4s ease;
    cursor: pointer;
    outline: none;
  }

  .submit-button-bg {
    position: absolute;
    inset: 0;
    background: linear-gradient(90deg,
      theme('colors.orange.600 / 90%'),
      theme('colors.orange.800 / 90%'),
      theme('colors.orange.600 / 90%')
    );
    background-size: 200% 100%;
    transition: all 0.5s ease;
  }

  .submit-button:hover .submit-button-bg {
    background-position: 100% 0;
  }

  .submit-button-content {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1;
  }

  .submit-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px theme('colors.orange.500 / 40%');
  }

  .submit-button:active {
    transform: translateY(0);
    box-shadow: 0 4px 10px theme('colors.orange.500 / 30%');
  }

  /* Text gradient using orange */
  .text-gradient-orange {
    background: linear-gradient(90deg, theme('colors.orange.400'), theme('colors.orange.600'));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  /* Animation classes */
  .reveal-element {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .reveal-element.revealed {
    opacity: 1;
    transform: translateY(0);
  }

  .slide-right {
    opacity: 0;
    transform: translateX(50px);
    animation: slideInFromRight 1.2s forwards;
    animation-delay: 0.2s;
  }

  @keyframes slideInFromRight {
    0% {
      opacity: 0;
      transform: translateX(50px);
    }
    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Form submission handler with client-side validation
    const form = document.getElementById('contact-form');

    form?.addEventListener('submit', (e) => {
      e.preventDefault();

      // Here you would normally send the form data to a server
      // For demo purposes, we'll just show a success message

      // Disable the submit button during submission
      const submitButton = form.querySelector('button[type="submit"]');
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.querySelector('span').textContent = "Sending...";
      }

      // Simulate sending and show success
      setTimeout(() => {
        // Create success notification with orange accent
        const notification = document.createElement('div');
        notification.className = 'fixed top-6 right-6 bg-dark-800/90 backdrop-blur-md px-6 py-4 rounded-lg border border-orange-500/30 text-white z-50 transform translate-y-[-20px] opacity-0 transition-all duration-500';
        notification.innerHTML = `
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-orange-500 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            <div>
              <h4 class="font-medium">Message Sent!</h4>
              <p class="text-sm text-white/70">We'll get back to you soon.</p>
            </div>
          </div>
        `;

        document.body.appendChild(notification);

        // Reset form
        form.reset();

        // Re-enable button
        if (submitButton) {
          submitButton.disabled = false;
          // Use the original button text from the content file
          submitButton.querySelector('span').textContent = "${contactForm.submitButton}";
        }

        // Show notification
        setTimeout(() => {
          notification.style.transform = 'translate(0)';
          notification.style.opacity = '1';
        }, 100);

        // Hide and remove notification
        setTimeout(() => {
          notification.style.transform = 'translate-y-[-20px]';
          notification.style.opacity = '0';

          setTimeout(() => {
            notification.remove();
          }, 500);
        }, 5000);
      }, 1500);
    });

    // Form input glow effect
    const formInputs = document.querySelectorAll('.form-input');
    formInputs.forEach(input => {
      input.addEventListener('mousemove', (e) => {
        const rect = input.getBoundingClientRect();
        const x = ((e.clientX - rect.left) / rect.width) * 100;
        const y = ((e.clientY - rect.top) / rect.height) * 100;

        const glow = input.nextElementSibling;
        if (glow && glow.classList.contains('form-input-glow')) {
          glow.style.setProperty('--x', `${x}%`);
          glow.style.setProperty('--y', `${y}%`);
        }
      });
    });

    // Reveal animations
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const delay = parseInt(entry.target.getAttribute('data-reveal-delay') || '0');
          setTimeout(() => {
            entry.target.classList.add('revealed');
          }, delay);
        }
      });
    }, {
      threshold: 0.1
    });

    document.querySelectorAll('.reveal-element, .hover-glow-item').forEach(el => {
      observer.observe(el);
    });
  });
</script>
