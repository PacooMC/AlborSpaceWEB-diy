---
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';

interface Props {
  title?: string;
  description?: string;
}

const {
  title = "ALBOR SPACE - Advanced Satellite Communication Systems",
  description = "Next generation satellite communication systems for space exploration."
} = Astro.props;
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700&display=swap" rel="stylesheet">
    <title>{title}</title>
  </head>
  <body class="bg-black text-white min-h-screen overflow-x-hidden">
    <!-- Fixed background that will remain on all pages -->
    <div class="fixed inset-0 bg-black z-[-10]"></div>

    <!-- Fixed background image instead of CSS-generated horizon -->
    <div class="fixed inset-0 z-[-8] overflow-hidden">
      <!-- Background image with planet horizon -->
      <div id="horizon-container" class="absolute inset-0 w-full h-full bg-image-container">
        {/* Removed transform translate-y-[25%] class from the image below */}
        <img src="/images/planet-horizon.jpg" alt="Planet horizon" class="w-full h-full object-cover object-bottom" id="horizon-image">

        <!-- Sun point has been removed -->
      </div>
    </div>

    <!-- Star field background -->
    <div id="star-field" class="fixed inset-0 z-[-5]"></div>

    <!-- Sunrise effect for navigation -->
    <div id="nav-sunrise" class="nav-sunrise"></div>

    <Navigation />

    <main>
      <slot />
    </main>

    <Footer />

    <style>
      /* Background image container with position control */
      .bg-image-container {
        position: relative;
        overflow: hidden;
      }

      /* Sun point style has been removed */
    </style>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Create stars background animation
        const starField = document.getElementById('star-field');
        if (starField) {
          // Clear existing stars
          starField.innerHTML = '';

          // Create stars with document fragment for better performance
          const fragment = document.createDocumentFragment();
          for (let i = 0; i < 150; i++) {
            const star = document.createElement('div');
            star.classList.add('star');

            // Random star size with a few larger ones
            const size = Math.random() > 0.9 ? Math.random() * 2 + 1.5 :
                     Math.random() > 0.7 ? Math.random() * 1.5 + 0.8 :
                     Math.random() * 0.8 + 0.2;

            // Star coloring - most stars are white, with occasional orange tint
            const color = Math.random() > 0.90 ?
              'rgba(255, 180, 120, 0.8)' :
              'rgba(255, 255, 255, 0.8)';

            star.style.width = `${size}px`;
            star.style.height = `${size}px`;
            star.style.top = `${Math.random() * 100}%`;
            star.style.left = `${Math.random() * 100}%`;
            star.style.backgroundColor = color;

            star.style.animationDelay = `${Math.random() * 5}s`;
            star.style.animationDuration = `${Math.random() * 3 + 2}s`;

            // Add occasional glow to larger stars
            if (size > 1.5) {
              star.style.boxShadow = `0 0 ${size}px ${color}`;
            }

            fragment.appendChild(star);
          }
          starField.appendChild(fragment);
        }

        // Scroll effect to fade image on scroll
        const horizonImage = document.getElementById('horizon-image');
        const horizonContainer = document.getElementById('horizon-container');
        const navSunrise = document.getElementById('nav-sunrise');
        const nav = document.getElementById('main-nav');

        // Create section observers for sunrise effect
        const sectionObserver = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              // Get the current section's position and show the sunrise effect
              if (navSunrise && nav) {
                const boundingRect = entry.target.getBoundingClientRect();
                const viewportHeight = window.innerHeight;

                // Element is entering from bottom of viewport
                if (boundingRect.top > 0 && boundingRect.top < viewportHeight) {
                  const intensity = 1 - (boundingRect.top / viewportHeight);
                  navSunrise.style.opacity = Math.min(intensity * 0.7, 0.7);
                }
                // Element is entering from top of viewport
                else if (boundingRect.bottom > 0 && boundingRect.bottom < viewportHeight) {
                  const intensity = boundingRect.bottom / viewportHeight;
                  navSunrise.style.opacity = Math.min(intensity * 0.7, 0.7);
                }

                navSunrise.classList.add('sunriseActive');
              }
            } else {
              // Fade out the sunrise effect when section is no longer intersecting
              if (navSunrise) {
                navSunrise.classList.remove('sunriseActive');
                setTimeout(() => {
                  if (!document.querySelector('.section.isIntersecting')) {
                    navSunrise.style.opacity = '0';
                  }
                }, 300);
              }
            }
          });
        }, {
          threshold: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],
          rootMargin: "-10% 0px -10% 0px"
        });

        // Observe all sections for the sunrise effect
        document.querySelectorAll('section').forEach(section => {
          section.classList.add('section');
          sectionObserver.observe(section);
        });

        // Enhanced scroll effect for background image
        window.addEventListener('scroll', () => {
          const scrollY = window.scrollY;
          const maxScroll = document.body.scrollHeight - window.innerHeight;
          const scrollPercentage = Math.min(scrollY / (window.innerHeight * 0.4), 1);

          // Fade image elements as user scrolls down
          if (horizonImage && horizonContainer) {
            // Full intensity at top, fades as you scroll down
            const fadeOpacity = Math.max(1 - scrollPercentage * 0.7, 0.3);

            horizonImage.style.opacity = fadeOpacity;
          }
        });
      });
    </script>
  </body>
</html>
